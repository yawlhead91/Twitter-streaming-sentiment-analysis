// Code generated by protoc-gen-go. DO NOT EDIT.
// source: twitter_service.proto

/*
Package twitter_service is a generated protocol buffer package.

It is generated from these files:
	twitter_service.proto

It has these top-level messages:
	Params
	Tweet
*/
package twitter_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Params struct {
	Track         []string `protobuf:"bytes,1,rep,name=Track" json:"Track,omitempty"`
	StallWarnings bool     `protobuf:"varint,2,opt,name=StallWarnings" json:"StallWarnings,omitempty"`
}

func (m *Params) Reset()                    { *m = Params{} }
func (m *Params) String() string            { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()               {}
func (*Params) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Params) GetTrack() []string {
	if m != nil {
		return m.Track
	}
	return nil
}

func (m *Params) GetStallWarnings() bool {
	if m != nil {
		return m.StallWarnings
	}
	return false
}

type Tweet struct {
	CreatedAt    string `protobuf:"bytes,1,opt,name=CreatedAt" json:"CreatedAt,omitempty"`
	RetweetCount int64  `protobuf:"varint,2,opt,name=RetweetCount" json:"RetweetCount,omitempty"`
	Text         string `protobuf:"bytes,3,opt,name=Text" json:"Text,omitempty"`
}

func (m *Tweet) Reset()                    { *m = Tweet{} }
func (m *Tweet) String() string            { return proto.CompactTextString(m) }
func (*Tweet) ProtoMessage()               {}
func (*Tweet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Tweet) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Tweet) GetRetweetCount() int64 {
	if m != nil {
		return m.RetweetCount
	}
	return 0
}

func (m *Tweet) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "Params")
	proto.RegisterType((*Tweet)(nil), "Tweet")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TwitterRefined service

type TwitterRefinedClient interface {
	// Obtains the Features available within the given Rectangle.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the rectangle may cover a large area and contain a
	// huge number of features.
	GetTweets(ctx context.Context, in *Params, opts ...grpc.CallOption) (TwitterRefined_GetTweetsClient, error)
}

type twitterRefinedClient struct {
	cc *grpc.ClientConn
}

func NewTwitterRefinedClient(cc *grpc.ClientConn) TwitterRefinedClient {
	return &twitterRefinedClient{cc}
}

func (c *twitterRefinedClient) GetTweets(ctx context.Context, in *Params, opts ...grpc.CallOption) (TwitterRefined_GetTweetsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TwitterRefined_serviceDesc.Streams[0], c.cc, "/TwitterRefined/GetTweets", opts...)
	if err != nil {
		return nil, err
	}
	x := &twitterRefinedGetTweetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TwitterRefined_GetTweetsClient interface {
	Recv() (*Tweet, error)
	grpc.ClientStream
}

type twitterRefinedGetTweetsClient struct {
	grpc.ClientStream
}

func (x *twitterRefinedGetTweetsClient) Recv() (*Tweet, error) {
	m := new(Tweet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TwitterRefined service

type TwitterRefinedServer interface {
	// Obtains the Features available within the given Rectangle.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the rectangle may cover a large area and contain a
	// huge number of features.
	GetTweets(*Params, TwitterRefined_GetTweetsServer) error
}

func RegisterTwitterRefinedServer(s *grpc.Server, srv TwitterRefinedServer) {
	s.RegisterService(&_TwitterRefined_serviceDesc, srv)
}

func _TwitterRefined_GetTweets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Params)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TwitterRefinedServer).GetTweets(m, &twitterRefinedGetTweetsServer{stream})
}

type TwitterRefined_GetTweetsServer interface {
	Send(*Tweet) error
	grpc.ServerStream
}

type twitterRefinedGetTweetsServer struct {
	grpc.ServerStream
}

func (x *twitterRefinedGetTweetsServer) Send(m *Tweet) error {
	return x.ServerStream.SendMsg(m)
}

var _TwitterRefined_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TwitterRefined",
	HandlerType: (*TwitterRefinedServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTweets",
			Handler:       _TwitterRefined_GetTweets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "twitter_service.proto",
}

func init() { proto.RegisterFile("twitter_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xcd, 0x4a, 0xc5, 0x30,
	0x10, 0x46, 0x8d, 0xf5, 0x56, 0x33, 0xa8, 0x8b, 0x41, 0x21, 0x88, 0x8b, 0x10, 0x5c, 0x74, 0x55,
	0xe4, 0xfa, 0x04, 0x52, 0xc1, 0xad, 0xc4, 0x80, 0x2b, 0x91, 0xd8, 0x8e, 0x12, 0xac, 0xa9, 0x24,
	0xa3, 0xf5, 0xf1, 0xc5, 0x74, 0x71, 0xe9, 0x6e, 0xe6, 0x30, 0x3f, 0xdf, 0x81, 0x73, 0x9e, 0x03,
	0x33, 0xa5, 0x97, 0x4c, 0xe9, 0x27, 0xf4, 0xd4, 0x7e, 0xa5, 0x89, 0x27, 0x73, 0x07, 0xf5, 0x83,
	0x4f, 0xfe, 0x33, 0xe3, 0x19, 0x6c, 0x5c, 0xf2, 0xfd, 0x87, 0x12, 0xba, 0x6a, 0xa4, 0x5d, 0x1a,
	0xbc, 0x82, 0x93, 0x47, 0xf6, 0xe3, 0xf8, 0xe4, 0x53, 0x0c, 0xf1, 0x3d, 0xab, 0x7d, 0x2d, 0x9a,
	0x23, 0xbb, 0x86, 0xe6, 0x19, 0x36, 0x6e, 0x26, 0x62, 0xbc, 0x04, 0xd9, 0x25, 0xf2, 0x4c, 0xc3,
	0x2d, 0x2b, 0xa1, 0x45, 0x23, 0xed, 0x0e, 0xa0, 0x81, 0x63, 0x4b, 0xfc, 0x3f, 0xd8, 0x4d, 0xdf,
	0x91, 0xcb, 0xad, 0xca, 0xae, 0x18, 0x22, 0x1c, 0x38, 0xfa, 0x65, 0x55, 0x95, 0xe5, 0x52, 0x6f,
	0xb7, 0x70, 0xea, 0x96, 0xf4, 0x96, 0xde, 0x42, 0xa4, 0x01, 0x35, 0xc8, 0x7b, 0xe2, 0xf2, 0x33,
	0xe3, 0x61, 0xbb, 0x28, 0x5c, 0xd4, 0x6d, 0x21, 0x66, 0xef, 0x5a, 0xbc, 0xd6, 0xc5, 0xef, 0xe6,
	0x2f, 0x00, 0x00, 0xff, 0xff, 0x11, 0xe8, 0xa9, 0xe2, 0xf8, 0x00, 0x00, 0x00,
}
