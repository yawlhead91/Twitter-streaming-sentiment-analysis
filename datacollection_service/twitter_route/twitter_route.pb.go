// Code generated by protoc-gen-go. DO NOT EDIT.
// source: twitter_route.proto

/*
Package twitter_route is a generated protocol buffer package.

It is generated from these files:
	twitter_route.proto

It has these top-level messages:
	Params
	Tweet
*/
package twitter_route

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Params struct {
	Track         []string `protobuf:"bytes,1,rep,name=Track" json:"Track,omitempty"`
	Language      []string `protobuf:"bytes,2,rep,name=Language" json:"Language,omitempty"`
	StallWarnings bool     `protobuf:"varint,3,opt,name=StallWarnings" json:"StallWarnings,omitempty"`
	Maxcount      int32    `protobuf:"varint,4,opt,name=Maxcount" json:"Maxcount,omitempty"`
}

func (m *Params) Reset()                    { *m = Params{} }
func (m *Params) String() string            { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()               {}
func (*Params) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Params) GetTrack() []string {
	if m != nil {
		return m.Track
	}
	return nil
}

func (m *Params) GetLanguage() []string {
	if m != nil {
		return m.Language
	}
	return nil
}

func (m *Params) GetStallWarnings() bool {
	if m != nil {
		return m.StallWarnings
	}
	return false
}

func (m *Params) GetMaxcount() int32 {
	if m != nil {
		return m.Maxcount
	}
	return 0
}

type Tweet struct {
	CreatedAt    string `protobuf:"bytes,1,opt,name=CreatedAt" json:"CreatedAt,omitempty"`
	RetweetCount int64  `protobuf:"varint,2,opt,name=RetweetCount" json:"RetweetCount,omitempty"`
	Text         string `protobuf:"bytes,3,opt,name=Text" json:"Text,omitempty"`
}

func (m *Tweet) Reset()                    { *m = Tweet{} }
func (m *Tweet) String() string            { return proto.CompactTextString(m) }
func (*Tweet) ProtoMessage()               {}
func (*Tweet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Tweet) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Tweet) GetRetweetCount() int64 {
	if m != nil {
		return m.RetweetCount
	}
	return 0
}

func (m *Tweet) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "Params")
	proto.RegisterType((*Tweet)(nil), "Tweet")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TwitterRoute service

type TwitterRouteClient interface {
	// Obtains the Features available within the given Rectangle.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the rectangle may cover a large area and contain a
	// huge number of features.
	GetTweets(ctx context.Context, in *Params, opts ...grpc.CallOption) (TwitterRoute_GetTweetsClient, error)
}

type twitterRouteClient struct {
	cc *grpc.ClientConn
}

func NewTwitterRouteClient(cc *grpc.ClientConn) TwitterRouteClient {
	return &twitterRouteClient{cc}
}

func (c *twitterRouteClient) GetTweets(ctx context.Context, in *Params, opts ...grpc.CallOption) (TwitterRoute_GetTweetsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TwitterRoute_serviceDesc.Streams[0], c.cc, "/TwitterRoute/GetTweets", opts...)
	if err != nil {
		return nil, err
	}
	x := &twitterRouteGetTweetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TwitterRoute_GetTweetsClient interface {
	Recv() (*Tweet, error)
	grpc.ClientStream
}

type twitterRouteGetTweetsClient struct {
	grpc.ClientStream
}

func (x *twitterRouteGetTweetsClient) Recv() (*Tweet, error) {
	m := new(Tweet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TwitterRoute service

type TwitterRouteServer interface {
	// Obtains the Features available within the given Rectangle.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the rectangle may cover a large area and contain a
	// huge number of features.
	GetTweets(*Params, TwitterRoute_GetTweetsServer) error
}

func RegisterTwitterRouteServer(s *grpc.Server, srv TwitterRouteServer) {
	s.RegisterService(&_TwitterRoute_serviceDesc, srv)
}

func _TwitterRoute_GetTweets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Params)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TwitterRouteServer).GetTweets(m, &twitterRouteGetTweetsServer{stream})
}

type TwitterRoute_GetTweetsServer interface {
	Send(*Tweet) error
	grpc.ServerStream
}

type twitterRouteGetTweetsServer struct {
	grpc.ServerStream
}

func (x *twitterRouteGetTweetsServer) Send(m *Tweet) error {
	return x.ServerStream.SendMsg(m)
}

var _TwitterRoute_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TwitterRoute",
	HandlerType: (*TwitterRouteServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTweets",
			Handler:       _TwitterRoute_GetTweets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "twitter_route.proto",
}

func init() { proto.RegisterFile("twitter_route.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xdd, 0xa6, 0x89, 0xdd, 0xa1, 0x5e, 0x46, 0x0f, 0x4b, 0xf1, 0xb0, 0x04, 0x0f, 0x7b,
	0x0a, 0x45, 0x7f, 0x81, 0xf4, 0xe0, 0x45, 0x41, 0xd6, 0x80, 0x27, 0x91, 0xb1, 0x0e, 0xa1, 0x58,
	0xb3, 0xb2, 0x99, 0xd0, 0x1e, 0xfc, 0xf1, 0x92, 0x0d, 0x54, 0x72, 0x9b, 0xf7, 0xcd, 0xf0, 0x66,
	0xde, 0xc0, 0xa5, 0x1c, 0x76, 0x22, 0x1c, 0xdf, 0x63, 0xe8, 0x85, 0xab, 0x9f, 0x18, 0x24, 0x94,
	0xbf, 0x50, 0x3c, 0x53, 0xa4, 0xef, 0x0e, 0xaf, 0x20, 0xaf, 0x23, 0x6d, 0xbf, 0x8c, 0xb2, 0x99,
	0xd3, 0x7e, 0x14, 0xb8, 0x82, 0xc5, 0x23, 0xb5, 0x4d, 0x4f, 0x0d, 0x9b, 0x59, 0x6a, 0x9c, 0x34,
	0xde, 0xc0, 0xc5, 0x8b, 0xd0, 0x7e, 0xff, 0x4a, 0xb1, 0xdd, 0xb5, 0x4d, 0x67, 0x32, 0xab, 0xdc,
	0xc2, 0x4f, 0xe1, 0xe0, 0xf0, 0x44, 0xc7, 0x6d, 0xe8, 0x5b, 0x31, 0x73, 0xab, 0x5c, 0xee, 0x4f,
	0xba, 0x7c, 0x83, 0xbc, 0x3e, 0x30, 0x0b, 0x5e, 0x83, 0xde, 0x44, 0x26, 0xe1, 0xcf, 0x7b, 0x31,
	0xca, 0x2a, 0xa7, 0xfd, 0x3f, 0xc0, 0x12, 0x96, 0x9e, 0x65, 0x18, 0xdc, 0x24, 0x9b, 0x99, 0x55,
	0x2e, 0xf3, 0x13, 0x86, 0x08, 0xf3, 0x9a, 0x8f, 0x92, 0x6e, 0xd0, 0x3e, 0xd5, 0xb7, 0x6b, 0x58,
	0xd6, 0x63, 0x66, 0x3f, 0x44, 0x46, 0x0b, 0xfa, 0x81, 0x25, 0x6d, 0xec, 0xf0, 0xbc, 0x1a, 0x83,
	0xaf, 0x8a, 0x2a, 0x91, 0xf2, 0x6c, 0xad, 0x3e, 0x8a, 0xf4, 0x95, 0xbb, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xb8, 0x6c, 0x7e, 0x50, 0x2c, 0x01, 0x00, 0x00,
}
